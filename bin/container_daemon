#!/bin/sh
set -e
user=btfs
repo="$BTFS_PATH"
bin=/usr/local/bin

if [ `id -u` -eq 0 ]; then
  echo "Changing user to $user"
  # ensure folder is writable
  su-exec "$user" test -w "$repo" || chown -R -- "$user" "$repo"
  # ensure local bin is writable (for auto-update)
  su-exec "$user" test -w "$bin" || chown -R -- "$user" "$bin"
  # restart script with new privileges
  exec su-exec "$user" "$0" "$@"
fi

# 2nd invocation with regular user
btfs version

# remove data folder to keep config consistent on restart
if [ -n "$BTFS_ENV" ]; then
  rm -rf $repo/*
fi

if [ -e "$repo/config" ]; then
  echo "Found BTFS fs-repo at $repo"
else
  case "$IPFS_PROFILE" in
    "") INIT_ARGS="" ;;
    *) INIT_ARGS="--profile=$IPFS_PROFILE" ;;
  esac
  btfs init $INIT_ARGS
  if [ "$BTFS_ENV" != "" ]; then
    btfs config Services.EscrowDomain escrow-service:50051
    btfs config Services.GuardDomain guard-interceptor-service:50051
    btfs config Services.HubDomain query-service:50051
    btfs config Services.StatusServerDomain status-grpc-service:50051
    btfs config --bool Experimental.DisableAutoUpdate true
  fi
  if [ "$BTFS_ENV" == "dev" ] || [ "$BTFS_ENV" == "staging" ]; then
    btfs config profile apply storage-client-dev
    btfs config --bool Experimental.Analytics true
    btfs config Datastore.StorageMax 500GiB
  elif [ "$BTFS_ENV" == "production" ]; then
    btfs config profile apply storage-client
    btfs config --bool Experimental.Analytics true
    btfs config Datastore.StorageMax 10TiB
  fi
  btfs config Addresses.API /ip4/0.0.0.0/tcp/5001
  btfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080
fi

exec btfs "$@"
